---
version: '2'
services:
  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  kafka-broker:
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - kafka-zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9997:9997"      
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9997"
    networks:
      - kafka-network

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    depends_on:
      - kafka-broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - kafka-network

  kafka-provision:
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - kafka-broker
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
               cub kafka-ready -b kafka-broker:29092 1 30 && \
               kafka-topics --create --topic firstTopic --partitions 3 --replication-factor 1 --if-not-exists --bootstrap-server kafka-broker:29092 && \
               kafka-topics --create --topic secondTopic --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka-broker:29092 && \
               kafka-topics --create --topic thirdTopic --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka-broker:29092'"
    networks:
      - kafka-network

  kafka-connect:   
    build:
      context: ./kafka-connect/
    depends_on:
      - kafka-broker
      - kafka-schema-registry
      - postgres
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka-broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    networks:
      - kafka-network

  kafka-connect-provisioning:
    image: curlimages/curl
    volumes:
      - ./kafka-connect-provisioning/:/app
    working_dir: /app
    command: "/bin/sh -c './wait-for.sh --timeout=120 http://kafka-connect:8083 -- ./provisioning.sh'"
    networks:
      - kafka-network

  kafka-akhq:
    image: tchiotludo/akhq:0.20.0
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: 'kafka-broker:29092'
              schema-registry:
                url: 'http://kafka-schema-registry:8081'
              connect:
                - name: "connect"
                  url: "http://kafka-connect:8083/"
    ports:
      - 8080:8080
    links:
      - kafka-broker
      - kafka-schema-registry
      - kafka-connect
    networks:
      - kafka-network

  kafka-cat:
    container_name: kafka-cat
    image: confluentinc/cp-kafkacat:7.0.1
    networks:
      - kafka-network

  postgres:
    image: postgres:14.1 
    environment:
      POSTGRES_PASSWORD: example
      POSTGRES_DB: test
    ports:
      - 5432:5432
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh  
    networks:
      - kafka-network

networks:
  kafka-network:
    driver: bridge
    name: kafka-network
